BellmanFordAlgo(g,s)

Données: graphe (classe BellmanFord) = tableau de Edges(arêtes) g, source (numéro de l'arête) s

Résultat: affichage du tableau t de distances entre la source et les autres arrêtes



Préconditions:
	s >=0
	s < size(g)
	g non nul
	....
	


Postconditions:
	g et s inchangés
	size(t) = size(g)
	...	
	

Objectif : Trouver le chemin le plus court depuis un sommet donné vers tous les autres dans un graphe pondéré, en tenant compte des poids négatifs mais en détectant les cycles de poids négatif.

Entrées :

	Un graphe dirigé représenté par un nombre de sommets V et un nombre d'arêtes E.
	Une liste d'arêtes sous forme de triplets (source,destination,poids).
	Un sommet source à partir duquel calculer les plus courts chemins.

Sorties :

	La distance minimale de la source à chaque sommet (ou Integer.MAX_VALUE si le sommet est inatteignable).
	Un message si un cycle de poids négatif est détecté.

Contraintes et exigences :

	Fonctionne correctement pour les graphes orientés pondérés.
	Prend en compte les poids négatifs, mais ne supporte pas les cycles de poids négatif.
	Complexité en O(VE).

Cas limites à prendre en compte :

	Un graphe avec des poids négatifs mais sans cycle négatif.
	Un graphe avec un cycle négatif (doit être détecté et affiché).
	Un graphe sans arêtes.
	Un graphe complètement connecté (toutes les paires de sommets sont reliées).
	Un graphe avec des sommets inaccessibles depuis la source.